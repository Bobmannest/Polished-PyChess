for row in board:
    for tile in row:
        if tile.get_piece() is not None and tile.get_position() in available_moves and not opposite_side(temp_piece,
                                                                                                         tile.get_piece()):
            available_moves.remove(tile.get_position())
            tile.get_piece().set_guarded(True)
return available_moves

#New version
def check_occupied_tile_positions(board, temp_piece, available_moves):
    occupied_positions = []
    for move in available_moves:
        tile = board[position[0]][position[1]]
        if tile.get_piece() is not None:
            if tile.get_position() in available_moves and not opposite_side(temp_piece, tile.get_piece()):
                occupied_positions.append(tile.get_position())
                tile.get_piece().set_guarded(True)
    return [move for move in available_moves if move not in occupied_positions]
